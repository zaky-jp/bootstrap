# overwrite own definition
function path() {
  command path "$@"
}

# define public functions
#@function path.get_absolute $1
#@description get absolute path of a path
#@param:1 $p as 'arbitary path'
#@return:0 always
#@stdout absolute path of $p
function path.get_absolute() {
  local p=$1
  echo "${p:a}"
  return 0
}

#@function path.get_dirname $1
#@description get directory name of a path
#@param:1 $p as 'arbitary path'
#@return:0 always
#@stdout directory of $fp
function path.get_dirname() {
  local p=$1
  echo "${p:h}"
  return 0
}

#@function path.exist $1
#@description return whether path exists
#@param:1 $p as 'arbitary path'
#@return:0 when path exists (either file or direcotry)
#@return:1 otherwise
#@stdout nil
function path.exist() {
  local p=$1
  [[ -d "$p" || -e "$p" || -s "$p" ]] # -e does not work for symlinks at macos
}

#@function path.do_mkdir $1
#@description create directory
#@param:1 $dp as 'directory path'
#@return:0 when directory exists or created
#@return:1 when file exists
#@return:n otherwise mkdir exit code
#@stdout log
function path.do_mkdir() {
  local dp=$1
  if [[ -d "$dp" ]]; then
    log.info "$dp already exists"
    return 0
  elif path.exist "$dp"; then
    log.warn "$dp already exists but is not a directory"
    return 1
  else
    log.info "Creating directory $dp"
    mkdir -p "$dp"
    return $?
  fi
}

#@function path.do_symlink $1 $2
#@description create symlink conveniently by creating directory if not exist
#@param:1 $src as 'link source path'
#@param:2 $link as 'destination link'
#@return:0 when symlink created
#@return:1 when source does not exist or link already exists
#@return:2 when insufficient arguments given
#@return:n otherwise ln exit code
#@stdout log
function path.do_symlink() {
  local src
  src=$(path.get_absolute "$1")
  local link=$2
  if [[ $# != 2 ]]; then
    log.warn "path.do_symlink: not enough arguments"
    return 2
  elif ! path.exist "$src"; then
    log.warn "$src does not exist"
    return 1
  elif path.exist "$link"; then
    log.warn "$link already exists"
    return 1
  else
    local link_dir
    link_dir=$(path.get_dirname "$link")
    path.do_mkdir "$link_dir" # make sure destination directory exists
  fi

  log.info "Symlinking $src to $link"
  ln -s "$src" "$link"
}

#@function path.do_backup $1
#@description create a backup file as '$1.bak' under the same directory
#@param:1 $p as 'file path to be backed up'
#@return:0 when backup file is successfully created
#@return:1 when file path does not exist or back up path already exists
#@stdout log
function path.do_backup() {
  local p=$1
  local b="${p}.bak"
  if ! path.exist "$p"; then
    log.warn "$p does not exist"
    return 1
  elif path.exist "$b"; then
    log.warn "$b already exists"
    return 1
  else
    log.info "Backing up $p"
    cp "$p" "$b"
    return $?
  fi
}

#@function path.do_rm $1
#@description remove file or directory
#@param:1 $p as 'arbitary path'
#@return:0 when file or directory is successfully removed
#@return:1 when file or directory does not exist
#@return:n otherwise rm exit code
#@stdout log
function path.do_rm() {
  local p=$1
  if ! path.exist "$p"; then
    log.warn "$p does not exist"
    return 1
  fi

  if [[ -d "$p" ]]; then
    log.info "Removing directory $p"
    rm -r "$p"
    return $?
  else
    log.info "Removing file $p"
    rm "$p"
    return $?
  fi
}
# begin module initilisation
require 'util/log'

# vim: se filetype=zsh: